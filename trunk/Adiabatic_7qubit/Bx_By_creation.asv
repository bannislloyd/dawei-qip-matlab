clear;

[sigma_x,sigma_y,sigma_z,I,Ix,Iy,Iz,ST0,ST1,KIx,KIy,KIz] = MultiPauli(7);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Initial State %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
s = kron(ones(2^6)/2^(6),Iz); %the same initial state as the full rotating frame

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% para %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    f_max = 8500; %starting driving frequency
    alpha = 0.21; %for stage 1 - related to powerlaw decay constant
    gamma = 19.313; %for stage 2 - exponential decay constant
    f_thresh = 64; %determines the border between stage 2 and stage 3
    theta = 0.1; %max angle of rotations used. choose 0.1 or less in order for our discrete evolution to be a good Trotter approximation of a continuous evolution

    
    % Stage 1: Omega decays very quickly as 1/f(t) = 1/f(0) + alpha*t

alpha

% Stage 1 continuous until df/dt reduces to what it would be in the second stage.

% Stage 2: Omega decays exponentially as df(t)/dt = - gamma * f(t)

gamma

% Stage 2 continuous until f reaches roughly the value f_thresh at which the gap becomes
% constant

f_thresh


% Stage 3: f decays linearly in time, continuing at the rate at which
% it was decaying at the end of stage 2.

% Other params

theta %max angle of rotations used. chosen such that Trotter interpretation (Viewpoint 2) is valid

f_max %max effective strength of X pulse (going by what is experimentally feasilbe said), controls the smallest timestep
dt = (2/(2*pi))*theta/f_max; %this is the initial (and smallest) timestep



% will be used to keep track of Omega and dOmega/dt
fprevious = f_max;
dfdt = 0;

% will be used to keep track of t and number of timesteps
t_count = 0;
count = 0;

% used as the time step in experiment, must guarantee w(ii)*delta_t << 1 to
% resolve the oscillations
delta_t = 2*10^(-6);
points = 0;
%%%%%%%%%%%%%%%% stage 1 %%%%%%%%%%%%%%%%%%%%
while (exp(gamma*dt) <= 1+(2/(2*pi))*alpha*theta)
    %change timestep
    dt = dt*(1+(2/(2*pi))*alpha*theta);
    fcurrent = 2*theta/(2*pi*dt);
    df = fcurrent-fprevious;
    
    N = floor(dt/delta_t); %divide dt by delta_t
    
    
   %this loop is to calculate the U in the N*delta_t time
    for jj = 1:N
        t_count = t_count + delta_t; %current time
             phi_x = 0;
             phi_y = 0;
       for ii = 1:6
        phi_x = phi_x + cos(2*pi*(w(ii)-O1)*t_count); %Re of H_c 
        phi_y = phi_y + sin(2*pi*(w(ii)-O1)*t_count); %Im of H_c
       end
    Bx = -fcurrent/2*phi_x;
    By = -fcurrent/2*phi_y;
    

    end
    %%
    %%this is for the left time in dt, which is dt-N*delta_t
        if (dt-N*delta_t)>0.5*delta_t
             phi_x = 0;
             phi_y = 0;
    t_count = t_count + dt-N*delta_t;
     for ii = 1:6
        phi_x = phi_x + cos(2*pi*w(ii)*t_count);
        phi_y = phi_y + sin(2*pi*w(ii)*t_count);
       end
    Bx(points) = -fcurrent/2*phi_x;
    By(points) = -fcurrent/2*phi_y;
   
    end
    %%   
 

    fprevious = fcurrent;
    
    count = count+1;
    dfdt = df/dt;
    
    
    %store for plotting
    f(count) = fcurrent;
    t(count) = t_count;
    timestep(count) = dt;
    angle(count) = theta;
    
   end
%%%%%%%%%%%%%%%% stage 2 %%%%%%%%%%%%%%%%%%%%
while (fprevious >= f_thresh)
    %change timestep
    dt = dt*exp(gamma*dt);
    N = floor(dt/delta_t);
    

    fcurrent = 2*theta/(2*pi*dt);
    df = fcurrent-fprevious;
    
    for jj = 1:N
        t_count = t_count + delta_t;
             phi_x = 0;
             phi_y = 0;
       for ii = 1:6
        phi_x = phi_x + cos(2*pi*(w(ii)-O1)*t_count)*KIx{ii};
        phi_y = phi_y + sin(2*pi*(w(ii)-O1)*t_count)*KIy{ii};
       end
    Bx = -fcurrent/2*phi_x;
    By = -fcurrent/2*phi_y;
    
    Htotal = H + (2*pi*Bx+2*pi*By);
    U = expm(-i*Htotal*delta_t);
    s = U*s*U';
    end
    
    if (dt-N*delta_t)>0.5*delta_t
             phi_x = 0;
             phi_y = 0;
    t_count = t_count + dt-N*delta_t;
     for ii = 1:6
        phi_x = phi_x + cos(2*pi*w(ii)*t_count)*KIx{ii};
        phi_y = phi_y + sin(2*pi*w(ii)*t_count)*KIy{ii};
       end
    Bx = -fcurrent/2*phi_x;
    By = -fcurrent/2*phi_y;
  
    Htotal = H + (2*pi*Bx+2*pi*By);
    %U = expm(-i*Htotal*(dt-N*delta_t));
    U = expm(-i*Htotal*(delta_t));
    s = U*s*U';  
    end
    
    
    fprevious = fcurrent;

 count = count+1;
    dfdt = df/dt;
    
    
    %store for plotting
    f(count) = fcurrent;
    t(count) = t_count;
    timestep(count) = dt;
    angle(count) = theta;
end
%%%%%%%%%%%%%%%% stage 3 %%%%%%%%%%%%%%%%%%%%
while (fprevious >= 0)
    %update Omega linearly
    N = floor(dt/delta_t);
    
    fcurrent = fprevious+df;
    
     theta = (2*pi/2)*dt*fcurrent;
    
    for jj = 1:N
        t_count = t_count + delta_t;
             phi_x = 0;
             phi_y = 0;
       for ii = 1:6
        phi_x = phi_x + cos(2*pi*w(ii)*t_count)*KIx{ii};
        phi_y = phi_y + sin(2*pi*w(ii)*t_count)*KIy{ii};
       end
    Bx = -fcurrent/2*phi_x;
    By = -fcurrent/2*phi_y;
  
    Htotal = H + (2*pi*Bx+2*pi*By);
    U = expm(-i*Htotal*delta_t);
    s = U*s*U';
    end
    
      if (dt-N*delta_t)>0.5*delta_t
             phi_x = 0;
             phi_y = 0;
    t_count = t_count + dt-N*delta_t;
     for ii = 1:6
        phi_x = phi_x + cos(2*pi*w(ii)*t_count)*KIx{ii};
        phi_y = phi_y + sin(2*pi*w(ii)*t_count)*KIy{ii};
       end
    Bx = -fcurrent/2*phi_x;
    By = -fcurrent/2*phi_y;
  
    Htotal = H + (2*pi*Bx+2*pi*By);
    %U = expm(-i*Htotal*(dt-N*delta_t));
    U = expm(-i*Htotal*(delta_t));
    s = U*s*U';  
    end
 
    fprevious = fcurrent;

 count = count+1;
    dfdt = df/dt;
    
    
    %store for plotting
    f(count) = fcurrent;
    t(count) = t_count;
    timestep(count) = dt;
    angle(count) = theta;
 end
% 


  
  